{
  "openapi": "3.0.0",
  "info": {
    "title": "Hono API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/users": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "explode": true,
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "age",
            "explode": false,
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
            }
          }
        ],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "age": {
                        "type": "integer",
                        "minimum": 3
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "nullable": false,
                    "required": [
                      "id",
                      "name",
                      "email",
                      "age",
                      "enabled",
                      "createdAt",
                      "updatedAt"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OmitUseridcreatedAtupdatedAt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "age": {
                      "type": "integer",
                      "minimum": 3
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "nullable": false,
                  "required": [
                    "id",
                    "name",
                    "email",
                    "age",
                    "enabled",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "explode": false,
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
            }
          }
        ],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "age": {
                      "type": "integer",
                      "minimum": 3
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "nullable": false,
                  "required": [
                    "id",
                    "name",
                    "email",
                    "age",
                    "enabled",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "explode": false,
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OmitUsercreatedAtupdatedAt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "age": {
                      "type": "integer",
                      "minimum": 3
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "nullable": false,
                  "required": [
                    "id",
                    "name",
                    "email",
                    "age",
                    "enabled",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "nullable": false,
                  "required": [
                    "id"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "explode": false,
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
            }
          }
        ],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/api/articles": {
      "get": {
        "parameters": [],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "authorId": {
                        "type": "integer"
                      },
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "nullable": false,
                    "required": [
                      "id",
                      "title",
                      "content",
                      "authorId",
                      "email",
                      "createdAt",
                      "updatedAt"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OmitArticleidcreatedAtupdatedAt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "authorId": {
                      "type": "integer"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "nullable": false,
                  "required": [
                    "id",
                    "title",
                    "content",
                    "authorId",
                    "email",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/articles/{id}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "explode": false,
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OmitArticlecreatedAtupdatedAt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "authorId": {
                      "type": "integer"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "nullable": false,
                  "required": [
                    "id",
                    "title",
                    "content",
                    "authorId",
                    "email",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "nullable": false,
                  "required": [
                    "id"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "explode": false,
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
            }
          }
        ],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "OmitUseridcreatedAtupdatedAt": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "age": {
            "type": "integer",
            "minimum": 3
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "name",
          "email",
          "age",
          "enabled"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OmitUsercreatedAtupdatedAt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "age": {
            "type": "integer",
            "minimum": 3
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "name",
          "email",
          "age",
          "enabled"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OmitArticleidcreatedAtupdatedAt": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "integer"
          }
        },
        "nullable": false,
        "required": [
          "email",
          "title",
          "content",
          "authorId"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OmitArticlecreatedAtupdatedAt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "integer"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "email",
          "title",
          "content",
          "authorId"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      }
    }
  }
}